
function writeEquilibrationQueue_SLURM;
function writeEquilibrationQueue_MINO;
function writeEquilibrationWorkstation;
function writeMDQueue_SLURM;
function writeMDQueue_MINO;
function writeMDQueue;
function writeMDShell_Workstation;
function writeAmberLaunchScripts_Workstation;
function writeEquilibrationQueue;
function writeDUCKSMDQueue_SLURM;
function writeDUCKSMDQueue_MINO;
function writeDUCKSMDQueue;
function writeDUCKSMDQueue_Workstation;

// write Basic shell scripts for running the whole thing on a GPU submit_duck_gpu_Workstation
global function writeAmberLaunchScripts_Workstation options
	writeEquilibrationWorkstation[];
	local ns=1;
    while (ns <= options.wqb_maxruns) loop
        writeMDShell_Workstation[ns,options];
        ns=ns+1;
    endloop
	writeDUCKSMDQueue_Workstation options;
endfunction

global function launchAmber_Workstation options
	writeAmberLaunchScripts_Workstation options;
endfunction

//SRC ADD NEXT LINES FROM AMBER_MD.SVL

global function writeAmberLaunchScripts options
	writeEquilibrationQueue[options];
	local ns=1;
	while (ns <= options.wqb_maxruns) loop
	    writeMDQueue[ns,options];
	    ns=ns+1;
	endloop
	writeDUCKSMDQueue options;
endfunction

global function launchAmber options
	writeAmberLaunchScripts options;
endfunction


//SRC SLURM queues

global function writeAmberLaunchScripts_SLURM options
	writeEquilibrationQueue_SLURM options;
	local ns=1;
    while (ns <= options.wqb_maxruns) loop
        writeMDQueue_SLURM[ns,options];
        ns=ns+1;
    endloop
	writeDUCKSMDQueue_SLURM options;
endfunction

global function launchAmber_SLURM options
	writeAmberLaunchScripts_SLURM options;
endfunction

//SRC SLURM queues end

//SRC MINO queues

global function writeAmberLaunchScripts_MINO options
	writeEquilibrationQueue_MINO options;
	local ns=1;
    while (ns <= options.wqb_maxruns) loop
        writeMDQueue_MINO[ns,options];
        ns=ns+1;
    endloop
	writeDUCKSMDQueue_MINO options;
endfunction

global function launchAmber_MINO options
	writeAmberLaunchScripts_MINO options;
endfunction

//SRC MINO queues end




global function writeEquilibrationQueue[options]
	local currentDir= cd [];
	local fh=fopenw ['equil.q'];
	fwrite[fh,'#!/bin/bash\n'];
	fwrite[fh,'###########################################################\n'];
	fwrite[fh,'# USAGE:    MARC                                          #\n'];
	fwrite[fh,'# qsub queue_whatever.csh to submit a job                 #\n'];
	fwrite[fh,'# qstat to monitorize your jobs                           #\n'];
	fwrite[fh,'# qstat -f to see an overview of the queues               #\n'];
	fwrite[fh,'# qdel "jobid" to delete a job                            #\n'];
	fwrite[fh,'###########################################################\n'];

	fwrite[fh,'#$ -N duck_equil          # The name of the job, can be whatever makes sense to you\n'];
	fwrite[fh,'#$ -S /bin/bash          # Force sh if not Sun Grid Engine default shell\n'];
	fwrite[fh,'#$ -cwd                 # The batchsystem should use the current directory as working directory.\n'];
	fwrite[fh,'#$ -q gpu            # Queue name where the job should be placed into.\n'];
	fwrite[fh,'#$ -o equil.q.o             # Redirect output stream to this file.\n'];
	fwrite[fh,'#$ -e equil.q.e             # Redirect error stream to this file.\n'];
	fwrite[fh,'#$ -l h_rt=10:00:00 # Time limit\n'];
	fwrite[fh,'#$ -l gpu=1\n'];
	fwrite[fh,'#$ -l h=\'syrah|garnatxa\'\n'];
	fwrite[fh,'### TO CHECK IF WE DEAL WITH A TITAN GPU ###################\n'];
	fwrite[fh,'smitool=`which nvidia-smi`\n'];
	fwrite[fh,'type=`$smitool -L | grep TITAN | cut -f5 -d" " | tail -n 1`\n'];
	fwrite[fh,'if [ "$type" == "TITAN" ]; then\n'];
	fwrite[fh,'export AMBERHOME=/data/SOFT/amber12_TITAN\n'];
	fwrite[fh,'export LD_LIBRARY_PATH=/usr/local/cuda-5.0/lib64\n'];
	fwrite[fh,'export PATH=/data/SOFT/amber12_TITAN/bin:${}PATH{}\n','{','}'];
	fwrite[fh,'else\n'];
	fwrite[fh,'module load amber12 cuda50 mpich2gnu44\n'];
	fwrite[fh,'fi\n'];
	fwrite[fh,'#############################################################\n'];
	fwrite[fh,'pmemd.cuda -O -i 1_min.in -o min.out -p lib/system_solv.prmtop -c lib/system_solv.prmcrd -r min.rst -ref lib/system_solv.prmcrd\n'];
	fwrite[fh,'pmemd.cuda -O -i 2_eq.in -o 2_eq.out -p lib/system_solv.prmtop -c min.rst -r  2_eq.rst -x 2_eq.nc -ref lib/system_solv.prmcrd\n'];
	fwrite[fh,'pmemd.cuda -O -i 3_eq_200.in -o eq3_200.out -p lib/system_solv.prmtop -c 2_eq.rst -r 3_eq_200.rst -x 3_eq_200.nc -ref lib/system_solv.prmcrd\n'];
	fwrite[fh,'pmemd.cuda -O -i 3_eq_250.in -o eq3_250.out -p lib/system_solv.prmtop -c 3_eq_200.rst -r 3_eq_250.rst -x 3_eq_250.nc -ref lib/system_solv.prmcrd\n'];
	fwrite[fh,'pmemd.cuda -O -i 3_eq_300.in -o eq3_300.out -p lib/system_solv.prmtop -c 3_eq_250.rst -r 3_eq_300.rst -x 3_eq_300.nc -ref lib/system_solv.prmcrd\n'];
	fwrite[fh,'pmemd.cuda -O -i 4a_eq.in -o eq4a.out -p lib/system_solv.prmtop -c 3_eq_300.rst -r 4a_eq.rst -x 4a_eq.nc -ref lib/system_solv.prmcrd -e 4a_eq.ene\n'];
	fwrite[fh,'pmemd.cuda -O -i 4b_eq.in -o eq4b.out -p lib/system_solv.prmtop -c 4a_eq.rst -r 4b_eq.rst -x 4b_eq.nc -ref lib/system_solv.prmcrd -e 4b_eq.ene\n'];
	fwrite[fh,'csh ../submit_duck_smd_gpu.csh 0 0 300K\n'];
	fwrite[fh,'qsub md1.q\n'];
	fwrite[fh,'exit\n'];
	fclose fh;
	
	cd currentDir;
endfunction



global function writeMDQueue[number,options]
	local currentDir= cd [];
	print options;

	local fh=fopenw [tok_cat['md',totok[number],'.q']];
	fwrite[fh,'#!/bin/bash\n'];
	fwrite[fh,'###########################################################\n'];
	fwrite[fh,'# USAGE: MARC                                             #\n'];
	fwrite[fh,'# qsub queue_whatever.csh to submit a job                 #\n'];
	fwrite[fh,'# qstat to monitorize your jobs                           #\n'];
	fwrite[fh,'# qstat -f to see an overview of the queues               #\n'];
	fwrite[fh,'# qdel "jobid" to delete a job                            #\n'];
	fwrite[fh,'###########################################################\n'];
	fwrite[fh,'#$ -N duck_md{}          # The name of the job, can be whatever makes sense to you\n',number];
	fwrite[fh,'#$ -S /bin/bash          # Force sh if not Sun Grid Engine default shell\n'];
	fwrite[fh,'#$ -cwd                 # The batchsystem should use the current directory as working directory.\n'];
	fwrite[fh,'#$ -q gpu            # Queue name where the job should be placed into.\n'];
	fwrite[fh,'#$ -o md{}.q.o             # Redirect output stream to this file.\n',number];
	fwrite[fh,'#$ -e md{}.q.e             # Redirect error stream to this file.\n',number];
	fwrite[fh,'#$ -l h_rt=20:00:00 # Time limit\n'];
	fwrite[fh,'#$ -l gpu=1\n'];
	fwrite[fh,'#$ -l h=\'syrah|garnatxa\'\n'];
	fwrite[fh,'### TO CHECK IF WE DEAL WITH A TITAN GPU ###################\n'];
	fwrite[fh,'smitool=`which nvidia-smi`\n'];
	fwrite[fh,'type=`$smitool -L | grep TITAN | cut -f5 -d" " | tail -n 1`\n'];
	fwrite[fh,'if [ "$type" == "TITAN" ]; then\n'];
	fwrite[fh,'export AMBERHOME=/data/SOFT/amber12_TITAN\n'];
	fwrite[fh,'export LD_LIBRARY_PATH=/usr/local/cuda-5.0/lib64\n'];
	fwrite[fh,'export PATH=/data/SOFT/amber12_TITAN/bin:${}PATH{}\n','{','}'];
	fwrite[fh,'else\n'];
	fwrite[fh,'module load amber12 cuda50 mpich2gnu44\n'];
	fwrite[fh,'fi\n'];
	fwrite[fh,'#############################################################\n'];
        fwrite[fh,'######BLOCK TO CHECK IF WQB IS LOWER THAN {}########\n',options.wqb_thresh];
        fwrite[fh,'if [ $(echo "`Rscript ../getWqbValues.R` < {}" | bc) -eq 1 ]; then\n',options.wqb_thresh];
        fwrite[fh,'        echo Wqb lower than {}, stopping DUck runs;\n',options.wqb_thresh];
        fwrite[fh,'        Rscript ../getWqbValues.R plot;\n'];
        fwrite[fh,'        exit\n'];
        fwrite[fh,'fi\n'];
        fwrite[fh,'###################################################\n'];
	if number==1 then
	  fwrite[fh,'pmemd.cuda -O -i md.in -o md1.out -p lib/system_solv.prmtop -c 4b_eq.rst -r md1.rst -x md1.nc -ref lib/system_solv.prmcrd\n'];
//	  fwrite[fh,'i=0 ; for f in `ls -1rt md.rst_*`; do ((i++)); mv $f md${}i{}.rst ; done\n','{','}'];// SRC deprecated
          fwrite[fh,'######BLOCK TO CHECK IF WQB IS LOWER THAN {}########\n',options.wqb_thresh];
          fwrite[fh,'if [ $(echo "`Rscript ../getWqbValues.R` < {}" | bc) -eq 1 ]; then\n',options.wqb_thresh];
          fwrite[fh,'        echo Wqb lower than {}, stopping DUck runs;\n',options.wqb_thresh];
          fwrite[fh,'        Rscript ../getWqbValues.R plot;\n'];
          fwrite[fh,'        exit\n'];
          fwrite[fh,'fi\n'];
          fwrite[fh,'###################################################\n'];
	  fwrite[fh,'csh ../submit_duck_smd_gpu.csh 0 1 325K\n'];
	  fwrite[fh,'csh ../submit_duck_smd_gpu.csh 1 1 300K\n'];
	else 
	  fwrite[fh,'pmemd.cuda -O -i md.in -o md{}.out -p lib/system_solv.prmtop -c md{}.rst -r md{}.rst -x md{}.nc -ref lib/system_solv.prmcrd\n',number,number-1,number,number];
//	  fwrite[fh,'i={} ; for f in `ls -1rt md.rst_*`; do ((i++)); mv $f md${}i{}.rst ; done\n',number-1,'{','}']; // SRC deprecated
	  //fwrite[fh,'qsub md{}.q\n',number+5];
          fwrite[fh,'######BLOCK TO CHECK IF WQB IS LOWER THAN {}########\n',options.wqb_thresh];
          fwrite[fh,'if [ $(echo "`Rscript ../getWqbValues.R` < {}" | bc) -eq 1 ]; then\n',options.wqb_thresh];
          fwrite[fh,'        echo Wqb lower than {}, stopping DUck runs;\n',options.wqb_thresh];
          fwrite[fh,'        Rscript ../getWqbValues.R plot;\n'];
          fwrite[fh,'        exit\n'];
          fwrite[fh,'fi\n'];
          fwrite[fh,'###################################################\n'];
	  fwrite[fh,'csh ../submit_duck_smd_gpu.csh {} {} 300K\n',number,number];
	  fwrite[fh,'csh ../submit_duck_smd_gpu.csh {} {} 325K\n',number,number];
	endif
		
	fwrite[fh,'qsub md{}.q\n',number+1];
	fwrite[fh,'exit\n'];
	fclose fh;
	
endfunction

//SRC MINOTAURO QUEUES; ADDED QUEUES FOR SLURM-POWER (SLURM)

global function writeEquilibrationWorkstation[]
	local currentDir= cd [];
	local fh=fopenw ['equilibration.sh'];
	fwrite[fh,'pmemd.cuda -O -i 1_min.in -o min.out -p lib/system_solv.prmtop -c lib/system_solv.prmcrd -r min.rst -ref lib/system_solv.prmcrd\n'];
	fwrite[fh,'pmemd.cuda -O -i 2_eq.in -o 2_eq.out -p lib/system_solv.prmtop -c min.rst -r  2_eq.rst -x 2_eq.nc -ref lib/system_solv.prmcrd\n'];
	fwrite[fh,'pmemd.cuda -O -i 3_eq_200.in -o eq3_200.out -p lib/system_solv.prmtop -c 2_eq.rst -r 3_eq_200.rst -x 3_eq_200.nc -ref lib/system_solv.prmcrd\n'];
	fwrite[fh,'pmemd.cuda -O -i 3_eq_250.in -o eq3_250.out -p lib/system_solv.prmtop -c 3_eq_200.rst -r 3_eq_250.rst -x 3_eq_250.nc -ref lib/system_solv.prmcrd\n'];
	fwrite[fh,'pmemd.cuda -O -i 3_eq_300.in -o eq3_300.out -p lib/system_solv.prmtop -c 3_eq_250.rst -r 3_eq_300.rst -x 3_eq_300.nc -ref lib/system_solv.prmcrd\n'];
	fwrite[fh,'pmemd.cuda -O -i 4a_eq.in -o eq4a.out -p lib/system_solv.prmtop -c 3_eq_300.rst -r 4a_eq.rst -x 4a_eq.nc -ref lib/system_solv.prmcrd -e 4a_eq.ene\n'];
	fwrite[fh,'pmemd.cuda -O -i 4b_eq.in -o eq4b.out -p lib/system_solv.prmtop -c 4a_eq.rst -r 4b_eq.rst -x 4b_eq.nc -ref lib/system_solv.prmcrd -e 4b_eq.ene\n'];
	fwrite[fh,'chmod +x ../launch_duck_gpu_Workstation.sh; ../launch_duck_gpu_Workstation.sh 0 0 300K\n'];
	//fwrite[fh,'../launch_duck_gpu_Workstation.sh 0 0 325K\n'];
	fwrite[fh,'chmod +x md1.sh; ./md1.sh\n'];
	fwrite[fh,'exit\n'];
	fclose fh;
	
	cd currentDir;
endfunction

// EQUILIBRATION
global function writeEquilibrationQueue_SLURM[options]
	local currentDir= cd [];
	local fh=fopenw ['equil.q'];
	fwrite[fh,'#!/bin/tcsh\n'];
	fwrite[fh,'#SBATCH --job-name="duck_equil"    \n'];
	fwrite[fh,'#SBATCH -D .                       \n'];
	fwrite[fh,'#SBATCH --time=10:00:00            \n'];
	fwrite[fh,'#SBATCH --output=equil.q.o         \n'];
	fwrite[fh,'#SBATCH --error=equil.q.e          \n'];
	fwrite[fh,'#SBATCH --ntasks=1                 \n'];
	fwrite[fh,'#SBATCH --gres=gpu:1               \n'];
	fwrite[fh,'#SBATCH --cpu-per-task=40        \n\n'];
	fwrite[fh,'set OPM_NUM_THREADS=1            \n\n'];
	fwrite[fh,'source /apps/modules/LMOD/7.7/lmod/7.7/init/tcsh\n'];
	fwrite[fh,'module load python R amber/16\n'];
	fwrite[fh,'srun pmemd.cuda -O -i 1_min.in -o min.out -p lib/system_solv.prmtop -c lib/system_solv.prmcrd -r min.rst -ref lib/system_solv.prmcrd\n'];
	fwrite[fh,'srun pmemd.cuda -O -i 2_eq.in -o 2_eq.out -p lib/system_solv.prmtop -c min.rst -r  2_eq.rst -x 2_eq.nc -ref lib/system_solv.prmcrd\n'];
	fwrite[fh,'srun pmemd.cuda -O -i 3_eq_200.in -o eq3_200.out -p lib/system_solv.prmtop -c 2_eq.rst -r 3_eq_200.rst -x 3_eq_200.nc -ref lib/system_solv.prmcrd\n'];
	fwrite[fh,'srun pmemd.cuda -O -i 3_eq_250.in -o eq3_250.out -p lib/system_solv.prmtop -c 3_eq_200.rst -r 3_eq_250.rst -x 3_eq_250.nc -ref lib/system_solv.prmcrd\n'];
	fwrite[fh,'srun pmemd.cuda -O -i 3_eq_300.in -o eq3_300.out -p lib/system_solv.prmtop -c 3_eq_250.rst -r 3_eq_300.rst -x 3_eq_300.nc -ref lib/system_solv.prmcrd\n'];
	fwrite[fh,'srun pmemd.cuda -O -i 4a_eq.in -o eq4a.out -p lib/system_solv.prmtop -c 3_eq_300.rst -r 4a_eq.rst -x 4a_eq.nc -ref lib/system_solv.prmcrd -e 4a_eq.ene\n'];
	fwrite[fh,'srun pmemd.cuda -O -i 4b_eq.in -o eq4b.out -p lib/system_solv.prmtop -c 4a_eq.rst -r 4b_eq.rst -x 4b_eq.nc -ref lib/system_solv.prmcrd -e 4b_eq.ene\n'];
	fwrite[fh,'csh ../submit_duck_smd_gpu.csh 0 0 300K\n'];
	fwrite[fh,'sbatch md1.q\n'];
	fwrite[fh,'exit\n'];
	fclose fh;
	
	cd currentDir;
endfunction

global function writeEquilibrationQueue_MINO[options]
	local currentDir= cd [];
	local fh=fopenw ['equil.q'];
	fwrite[fh,'#!/bin/tcsh\n'];
	fwrite[fh,'# @ job_name = duck_equil          \n'];
	fwrite[fh,'# @ initialdir = .                 \n'];
	fwrite[fh,'# @ wall_clock_limit = 10:00:00    \n'];
	fwrite[fh,'# @ output = equil.q.o             \n'];
	fwrite[fh,'# @ error = equil.q.e              \n'];
	fwrite[fh,'# @ total_tasks = 1                \n'];
	fwrite[fh,'# @ tasks_per_node = 1             \n'];
	fwrite[fh,'# @ gpus_per_node = 1              \n\n'];
	//fwrite[fh,'module load AMBER/12 prace\n'];
	fwrite[fh,'module load intel/14.0.1 mkl/11.1 cuda/5.0 AMBER/14 R\n'];
	//fwrite[fh,'#module switch cuda/4.0 \n'];
	fwrite[fh,'#setenv PATH $AMBERHOME/bin4.1:$PATH \n'];
	fwrite[fh,'srun pmemd.cuda -O -i 1_min.in -o min.out -p lib/system_solv.prmtop -c lib/system_solv.prmcrd -r min.rst -ref lib/system_solv.prmcrd\n'];
	fwrite[fh,'srun pmemd.cuda -O -i 2_eq.in -o 2_eq.out -p lib/system_solv.prmtop -c min.rst -r  2_eq.rst -x 2_eq.nc -ref lib/system_solv.prmcrd\n'];
	fwrite[fh,'srun pmemd.cuda -O -i 3_eq_200.in -o eq3_200.out -p lib/system_solv.prmtop -c 2_eq.rst -r 3_eq_200.rst -x 3_eq_200.nc -ref lib/system_solv.prmcrd\n'];
	fwrite[fh,'srun pmemd.cuda -O -i 3_eq_250.in -o eq3_250.out -p lib/system_solv.prmtop -c 3_eq_200.rst -r 3_eq_250.rst -x 3_eq_250.nc -ref lib/system_solv.prmcrd\n'];
	fwrite[fh,'srun pmemd.cuda -O -i 3_eq_300.in -o eq3_300.out -p lib/system_solv.prmtop -c 3_eq_250.rst -r 3_eq_300.rst -x 3_eq_300.nc -ref lib/system_solv.prmcrd\n'];
	fwrite[fh,'srun pmemd.cuda -O -i 4a_eq.in -o eq4a.out -p lib/system_solv.prmtop -c 3_eq_300.rst -r 4a_eq.rst -x 4a_eq.nc -ref lib/system_solv.prmcrd -e 4a_eq.ene\n'];
	fwrite[fh,'srun pmemd.cuda -O -i 4b_eq.in -o eq4b.out -p lib/system_solv.prmtop -c 4a_eq.rst -r 4b_eq.rst -x 4b_eq.nc -ref lib/system_solv.prmcrd -e 4b_eq.ene\n'];
	fwrite[fh,'csh ../submit_duck_smd_gpu.csh 0 0 300K\n'];
	fwrite[fh,'mnsubmit md1.q\n'];
	fwrite[fh,'exit\n'];
	fclose fh;
	
	cd currentDir;
endfunction

// MD

global function writeMDShell_Workstation[number,options]
	local currentDir= cd [];
	local fh=fopenw [tok_cat['md',totok[number],'.sh']];
	//fwrite[fh,'#!/bin/tcsh\n'];		//commented for now as there are several environment problems on osx
    //    fwrite[fh,'######BLOCK TO CHECK IF WQB IS LOWER THAN 6########\n'];
    //    fwrite[fh,'set res=`Rscript ../getWqbValues.R`;\n'];
    //    fwrite[fh,'if ( `echo "$res < 6" | bc` == 1 ) then;\n'];
    //    fwrite[fh,'        echo Wqb lower than 6, stopping DUck runs;\n'];
    //    fwrite[fh,'        Rscript ../getWqbValues.R plot;\n'];
    //    fwrite[fh,'        exit\n'];
    //    fwrite[fh,'endif\n'];
    //    fwrite[fh,'###################################################\n'];
    //had the comment the previous block as this is not bash, but csh
	if number==1 then
	  fwrite[fh,'pmemd.cuda -O -i md.in -o md1.out -p lib/system_solv.prmtop -c 4b_eq.rst -r md1.rst -x md1.nc -ref lib/system_solv.prmcrd\n'];
	else
	  fwrite[fh,'pmemd.cuda -O -i md.in -o md{}.out -p lib/system_solv.prmtop -c md{}.rst -r md{}.rst -x md{}.nc -ref lib/system_solv.prmcrd\n',number,number-1,number,number];
	endif  
	
//	fwrite[fh,'set i = {}\n',number-1];
//	fwrite[fh,'for f in `ls md.rst_*`;\n'];
//	fwrite[fh,'do\n'];
//	fwrite[fh,'((i+=1))\n'];
//	fwrite[fh,'mv $f md${}i{}.rst\n','{','}'];
//	fwrite[fh,'done\n'];
	if number==1 then
		fwrite[fh,'../launch_duck_gpu_Workstation.sh 0 1 325K\n'];
		fwrite[fh,'../launch_duck_gpu_Workstation.sh 1 1 300K\n'];
	else 
		fwrite[fh,'../launch_duck_gpu_Workstation.sh {} {} 300K\n',number,number];
		fwrite[fh,'../launch_duck_gpu_Workstation.sh {} {} 325K\n',number,number];
	endif
	fwrite[fh,'wqb=`Rscript ../getWqbValues.R`\n'];
	fwrite[fh,'echo "$wqb" > wqb.txt\n'];
	fwrite[fh,'if [ $(echo " $wqb > {}" | bc) -eq 1 ]\n',options.wqb_thresh];
	fwrite[fh,'then\n'];
	fwrite[fh,'chmod +x ./md{}.sh; ./md{}.sh\n',number+1,number+1];
	fwrite[fh,'fi\n'];
	fclose fh; 
endfunction

global function writeMDQueue_SLURM[number,options]
	local currentDir= cd [];
	local fh=fopenw [tok_cat['md',totok[number],'.q']];
	fwrite[fh,'#!/bin/tcsh\n'];
	fwrite[fh,'#SBATCH --job-name="duck_md"       \n'];
	fwrite[fh,'#SBATCH -D .                       \n'];
	fwrite[fh,'#SBATCH --time=20:00:00            \n'];
	fwrite[fh,'#SBATCH --output=md.q.o         \n'];
	fwrite[fh,'#SBATCH --error=md.q.e          \n'];
	fwrite[fh,'#SBATCH --ntasks=1                 \n'];
	fwrite[fh,'#SBATCH --gres=gpu:1              \n\n'];
	fwrite[fh,'#SBATCH --cpu-per-task=40        \n\n'];
	fwrite[fh,'set OPM_NUM_THREADS=1            \n\n'];
	fwrite[fh,'source /apps/modules/LMOD/7.7/lmod/7.7/init/tcsh\n'];
	fwrite[fh,'module load python R amber/16\n'];
	fwrite[fh,'######BLOCK TO CHECK IF WQB IS LOWER THAN {}########\n',options.wqb_thresh];
	fwrite[fh,'unsetenv R_HOME;\nset res=`Rscript ../getWqbValues.R`;\n'];
	fwrite[fh,'if ( `echo "$res < {}" | bc` == 1 ) then;\n',options.wqb_thresh];
	fwrite[fh,'        echo Wqb lower than {}, stopping DUck runs;\n',options.wqb_thresh];
	fwrite[fh,'        Rscript ../getWqbValues.R plot;\n'];
	fwrite[fh,'        exit\n'];
	fwrite[fh,'endif\n'];
	fwrite[fh,'###################################################\n'];

	if number==1 then
	  fwrite[fh,'srun pmemd.cuda -O -i md.in -o md1.out -p lib/system_solv.prmtop -c 4b_eq.rst -r md1.rst -x md1.nc -ref lib/system_solv.prmcrd\n'];
//	  fwrite[fh,'set i = 0\n'];
//SRC	  fwrite[fh,'foreach f ( `ls -1rt md.rst_*` )\n'];
//depre	  fwrite[fh,'@ i = $i + 1 \n'];
//cated	  fwrite[fh,'mv $f md${}i{}.rst\n','{','}'];
//	  fwrite[fh,'end\n'];
	  fwrite[fh,'######BLOCK TO CHECK IF WQB IS LOWER THAN {}########\n',options.wqb_thresh];
	  fwrite[fh,'unsetenv R_HOME;\nset res=`Rscript ../getWqbValues.R`;\n'];
	  fwrite[fh,'if ( `echo "$res < {}" | bc` == 1 ) then;\n',options.wqb_thresh];
	  fwrite[fh,'        echo Wqb lower than {}, stopping DUck runs;\n',options.wqb_thresh];
	  fwrite[fh,'        Rscript ../getWqbValues.R plot;\n'];
	  fwrite[fh,'        exit\n'];
	  fwrite[fh,'endif\n'];
	  fwrite[fh,'###################################################\n'];
          fwrite[fh,'csh ../submit_duck_smd_gpu.csh 1 1 300K\n'];
          fwrite[fh,'csh ../submit_duck_smd_gpu.csh 0 1 325K\n'];
	else 
	  fwrite[fh,'srun pmemd.cuda -O -i md.in -o md{}.out -p lib/system_solv.prmtop -c md{}.rst -r md{}.rst -x md{}.nc -ref lib/system_solv.prmcrd\n',number,number-1,number,number];
//SRC	  fwrite[fh,'set i = {}\n',number-1];
//depre	  fwrite[fh,'foreach f ( `ls -1rt md.rst_*` )\n'];
//cated	  fwrite[fh,'@ i = $i + 1 \n'];
//	  fwrite[fh,'mv $f md${}i{}.rst\n','{','}'];
//	  fwrite[fh,'end\n'];
	  fwrite[fh,'######BLOCK TO CHECK IF WQB IS LOWER THAN {}########\n',options.wqb_thresh];
      	  fwrite[fh,'unsetenv R_HOME;\nset res=`Rscript ../getWqbValues.R`;\n'];
    	  fwrite[fh,'if ( `echo "$res < {}" | bc` == 1 ) then;\n',options.wqb_thresh];
	  fwrite[fh,'        echo Wqb lower than {}, stopping DUck runs;\n',options.wqb_thresh];
	  fwrite[fh,'        Rscript ../getWqbValues.R plot;\n'];
	  fwrite[fh,'        exit\n'];
	  fwrite[fh,'endif\n'];
	  fwrite[fh,'###################################################\n'];
          fwrite[fh,'csh ../submit_duck_smd_gpu.csh {} {} 300K\n',number,number];
          fwrite[fh,'csh ../submit_duck_smd_gpu.csh {} {} 325K\n',number,number];
	endif
        fwrite[fh,'sbatch md{}.q\n',number+1];
	fwrite[fh,'exit\n'];
	fclose fh;	
endfunction

global function writeMDQueue_MINO[number,options]
	local currentDir= cd [];
	local fh=fopenw [tok_cat['md',totok[number],'.q']];
	fwrite[fh,'#!/bin/tcsh\n'];
	fwrite[fh,'# @ job_name = duck_md{}           \n'];
	fwrite[fh,'# @ initialdir = .                 \n'];
	fwrite[fh,'# @ wall_clock_limit = 20:00:00    \n'];
	fwrite[fh,'# @ output = md{}.q.o              \n'];
	fwrite[fh,'# @ error = md{}.q.e               \n'];
	fwrite[fh,'# @ total_tasks = 1                \n'];
	fwrite[fh,'# @ tasks_per_node = 1             \n'];
	fwrite[fh,'# @ gpus_per_node = 1              \n\n'];
	//fwrite[fh,'module load AMBER/12 prace\n'];
	fwrite[fh,'module load intel/14.0.1 mkl/11.1 cuda/5.0 AMBER/14 R\n'];
	//fwrite[fh,'#module switch cuda/4.0 \n'];
	fwrite[fh,'#setenv PATH $AMBERHOME/bin4.1:$PATH \n'];
	fwrite[fh,'######BLOCK TO CHECK IF WQB IS LOWER THAN {}########\n',options.wqb_thresh];
	fwrite[fh,'set res=`Rscript ../getWqbValues.R`;\n'];
	fwrite[fh,'if ( `echo "$res < {}" | bc` == 1 ) then;\n',options.wqb_thresh];
	fwrite[fh,'        echo Wqb lower than {}, stopping DUck runs;\n',options.wqb_thresh];
	fwrite[fh,'        Rscript ../getWqbValues.R plot;\n'];
	fwrite[fh,'        exit\n'];
	fwrite[fh,'endif\n'];
	fwrite[fh,'###################################################\n'];

	if number==1 then
	  fwrite[fh,'srun pmemd.cuda -O -i md.in -o md1.out -p lib/system_solv.prmtop -c 4b_eq.rst -r md1.rst -x md1.nc -ref lib/system_solv.prmcrd\n'];
//	  fwrite[fh,'set i = 0\n'];
//SRC	  fwrite[fh,'foreach f ( `ls -1rt md.rst_*` )\n'];
//depre	  fwrite[fh,'@ i = $i + 1 \n'];
//cated	  fwrite[fh,'mv $f md${}i{}.rst\n','{','}'];
//	  fwrite[fh,'end\n'];
	  fwrite[fh,'######BLOCK TO CHECK IF WQB IS LOWER THAN {}########\n',options.wqb_thresh];
	  fwrite[fh,'set res=`Rscript ../getWqbValues.R`;\n'];
	  fwrite[fh,'if ( `echo "$res < {}" | bc` == 1 ) then;\n',options.wqb_thresh];
	  fwrite[fh,'        echo Wqb lower than {}, stopping DUck runs;\n',options.wqb_thresh];
	  fwrite[fh,'        Rscript ../getWqbValues.R plot;\n'];
	  fwrite[fh,'        exit\n'];
	  fwrite[fh,'endif\n'];
	  fwrite[fh,'###################################################\n'];
          fwrite[fh,'csh ../submit_duck_smd_gpu.csh 1 1 300K\n'];
          fwrite[fh,'csh ../submit_duck_smd_gpu.csh 0 1 325K\n'];
	else 
	  fwrite[fh,'srun pmemd.cuda -O -i md.in -o md{}.out -p lib/system_solv.prmtop -c md{}.rst -r md{}.rst -x md{}.nc -ref lib/system_solv.prmcrd\n',number,number-1,number,number];
//SRC	  fwrite[fh,'set i = {}\n',number-1];
//depre	  fwrite[fh,'foreach f ( `ls -1rt md.rst_*` )\n'];
//cated	  fwrite[fh,'@ i = $i + 1 \n'];
//	  fwrite[fh,'mv $f md${}i{}.rst\n','{','}'];
//	  fwrite[fh,'end\n'];
	  fwrite[fh,'######BLOCK TO CHECK IF WQB IS LOWER THAN {}########\n',options.wqb_thresh];
      	  fwrite[fh,'set res=`Rscript ../getWqbValues.R`;\n'];
    	  fwrite[fh,'if ( `echo "$res < {}" | bc` == 1 ) then;\n',options.wqb_thresh];
	  fwrite[fh,'        echo Wqb lower than {}, stopping DUck runs;\n',options.wqb_thresh];
	  fwrite[fh,'        Rscript ../getWqbValues.R plot;\n'];
	  fwrite[fh,'        exit\n'];
	  fwrite[fh,'endif\n'];
	  fwrite[fh,'###################################################\n'];
          fwrite[fh,'csh ../submit_duck_smd_gpu.csh {} {} 300K\n',number,number];
          fwrite[fh,'csh ../submit_duck_smd_gpu.csh {} {} 325K\n',number,number];
	endif
        fwrite[fh,'mnsubmit md{}.q\n',number+1];
	fwrite[fh,'exit\n'];
	fclose fh;	
endfunction

// SMD

global function writeDUCKSMDQueue_SLURM[options]
	local currentDir= cd [];
        local fh=fopenw ['duck_template_gpu.q'];
        fwrite[fh,'#!/bin/tcsh\n'];
        fwrite[fh,'#SBATCH --job-name=duck_smdZZ    \n'];
        fwrite[fh,'#SBATCH -D .                       \n'];
        fwrite[fh,'#SBATCH --time=10:00:00           \n'];
        fwrite[fh,'#SBATCH --output=duck_ZZ.q.o     \n'];
        fwrite[fh,'#SBATCH --error=duck_ZZ.q.e      \n'];
        fwrite[fh,'#SBATCH --ntasks=1               \n'];
        fwrite[fh,'#SBATCH --gres=gpu:1             \n\n'];
        fwrite[fh,'#SBATCH --cpu-per-task=40        \n\n'];
		fwrite[fh,'set OPM_NUM_THREADS=1            \n\n'];
        fwrite[fh,'source /apps/modules/LMOD/7.7/lmod/7.7/init/tcsh\n'];
        fwrite[fh,'module load python R amber/16\n'];
        fwrite[fh,'srun pmemd.cuda -O -i ../duck.in -o duck_ZZ.o -p ../lib/system_solv.prmtop -c ../mdZZ.rst -r duck_ZZ.rst -x duck_ZZ.nc -e duck_ZZ.e -ref ../lib/system_solv.prmcrd\n'];
        fwrite[fh,'exit\n'];
        fclose fh;

	local fh2=fopenw ['duck_template_gpu_325K.q'];
        fwrite[fh2,'#!/bin/tcsh\n'];
        fwrite[fh2,'#SBATCH --job-name=duck_smdZZ_325K \n'];
        fwrite[fh2,'#SBATCH -D .                          \n'];
        fwrite[fh2,'#SBATCH --time=10:00:00              \n'];
        fwrite[fh2,'#SBATCH --output=duck_ZZ.q.o        \n'];
        fwrite[fh2,'#SBATCH --error=duck_ZZ.q.e         \n'];
        fwrite[fh2,'#SBATCH --ntasks=1                  \n'];
        fwrite[fh2,'#SBATCH --gres=gpu:1                \n\n'];
        fwrite[fh,'#SBATCH --cpu-per-task=40        \n\n'];
		fwrite[fh,'set OPM_NUM_THREADS=1            \n\n'];
        fwrite[fh2,'source /apps/modules/LMOD/7.7/lmod/7.7/init/tcsh\n'];
        fwrite[fh2,'module load python R amber/16\n'];
        fwrite[fh2,'srun pmemd.cuda -O -i ../duck_325K.in -o duck_ZZ.o -p ../lib/system_solv.prmtop -c ../mdZZ.rst -r duck_ZZ.rst -x duck_ZZ.nc -e duck_ZZ.e -ref ../lib/system_solv.prmcrd\n'];
        fwrite[fh2,'exit\n'];
        fclose fh2;

        cd currentDir;
endfunction

global function writeDUCKSMDQueue_MINO[options]
	local currentDir= cd [];
        local fh=fopenw ['duck_template_gpu.q'];
        fwrite[fh,'#!/bin/tcsh\n'];
        fwrite[fh,'# @ job_name = duck_smdZZ          \n'];
        fwrite[fh,'# @ initialdir = .                 \n'];
        fwrite[fh,'# @ wall_clock_limit = 10:00:00    \n'];
        fwrite[fh,'# @ output = duck_ZZ.q.o           \n'];
        fwrite[fh,'# @ error = duck_ZZ.q.e            \n'];
        fwrite[fh,'# @ total_tasks = 1                \n'];
        fwrite[fh,'# @ tasks_per_node = 1             \n'];
        fwrite[fh,'# @ gpus_per_node = 1              \n\n'];
        fwrite[fh,'module load intel/14.0.1 mkl/11.1 cuda/5.0 AMBER/14 R\n'];
        fwrite[fh,'#setenv PATH $AMBERHOME/bin4.1:$PATH \n'];
        fwrite[fh,'srun pmemd.cuda -O -i ../duck.in -o duck_ZZ.o -p ../lib/system_solv.prmtop -c ../mdZZ.rst -r duck_ZZ.rst -x duck_ZZ.nc -e duck_ZZ.e -ref ../lib/system_solv.prmcrd\n'];
        fwrite[fh,'exit\n'];
        fclose fh;

	local fh2=fopenw ['duck_template_gpu_325K.q'];
        fwrite[fh2,'#!/bin/tcsh\n'];
        fwrite[fh2,'# @ job_name = duck_smdZZ_325K       \n'];
        fwrite[fh2,'# @ initialdir = .                 \n'];
        fwrite[fh2,'# @ wall_clock_limit = 10:00:00    \n'];
        fwrite[fh2,'# @ output = duck_ZZ.q.o           \n'];
        fwrite[fh2,'# @ error = duck_ZZ.q.e            \n'];
        fwrite[fh2,'# @ total_tasks = 1                \n'];
        fwrite[fh2,'# @ tasks_per_node = 1             \n'];
        fwrite[fh2,'# @ gpus_per_node = 1              \n\n'];
        fwrite[fh2,'module load intel/14.0.1 mkl/11.1 cuda/5.0 AMBER/14 R\n'];
        fwrite[fh2,'#setenv PATH $AMBERHOME/bin4.1:$PATH \n'];
        fwrite[fh2,'srun pmemd.cuda -O -i ../duck_325K.in -o duck_ZZ.o -p ../lib/system_solv.prmtop -c ../mdZZ.rst -r duck_ZZ.rst -x duck_ZZ.nc -e duck_ZZ.e -ref ../lib/system_solv.prmcrd\n'];
        fwrite[fh2,'exit\n'];
        fclose fh2;

        cd currentDir;
endfunction

global function writeDUCKSMDQueue[options]
        local currentDir= cd [];
        local fh=fopenw ['duck_template_gpu.q'];
        fwrite[fh,'#!/bin/bash\n'];
        fwrite[fh,'###########################################################\n'];
        fwrite[fh,'# USAGE: MARC                                             #\n'];
        fwrite[fh,'# qsub queue_whatever.csh to submit a job                 #\n'];
        fwrite[fh,'# qstat to monitorize your jobs                           #\n'];
        fwrite[fh,'# qstat -f to see an overview of the queues               #\n'];
        fwrite[fh,'# qdel "jobid" to delete a job                            #\n'];
        fwrite[fh,'###########################################################\n'];
        fwrite[fh,'#$ -N duck_smdZZ   # The name of the job, can be whatever makes sense to you\n'];
        fwrite[fh,'#$ -S /bin/bash          # Force sh if not Sun Grid Engine default shell\n'];
        fwrite[fh,'#$ -cwd  # The batchsystem should use the current directory as working directory.\n'];
        fwrite[fh,'#$ -q gpu            # Queue name where the job should be placed into.\n'];
        fwrite[fh,'#$ -o duck_ZZ.q.o             # Redirect output stream to this file.\n'];
        fwrite[fh,'#$ -e duck_ZZ.q.e             # Redirect error stream to this file.\n'];
        fwrite[fh,'#$ -l h_rt=10:00:00 # Time limit\n'];
        fwrite[fh,'#$ -l gpu=1\n'];
//      fwrite[fh,'#$ -l h=\'syrah|garnatxa\'\n'];
        fwrite[fh,'### TO CHECK IF WE DEAL WITH A TITAN GPU ###################\n'];
        fwrite[fh,'smitool=`which nvidia-smi`\n'];
        fwrite[fh,'type=`$smitool -L | grep TITAN | cut -f5 -d" " | tail -n 1`\n'];
        fwrite[fh,'if [ "$type" == "TITAN" ]; then\n'];
        fwrite[fh,'export AMBERHOME=/data/SOFT/amber12_TITAN\n'];
        fwrite[fh,'export LD_LIBRARY_PATH=/usr/local/cuda-5.0/lib64\n'];
        fwrite[fh,'export PATH=/data/SOFT/amber12_TITAN/bin:${}PATH{}\n','{','}'];
        fwrite[fh,'else\n'];
        fwrite[fh,'module load amber12 cuda50 mpich2gnu44\n'];
        fwrite[fh,'fi\n'];
        fwrite[fh,'#############################################################\n'];
        fwrite[fh,'pmemd.cuda -O -i ../duck.in -o duck_ZZ.o -p ../lib/system_solv.prmtop -c ../mdZZ.rst -r duck_ZZ.rst -x duck_ZZ.nc -e duck_ZZ.e -ref ../lib/system_solv.prmcrd\n'];
        fwrite[fh,'exit\n'];
        fclose fh;

        local fh2=fopenw ['duck_template_gpu_325K.q'];
        fwrite[fh2,'#!/bin/bash\n'];
        fwrite[fh2,'###########################################################\n'];
        fwrite[fh2,'# USAGE: MARC                                             #\n'];
        fwrite[fh2,'# qsub queue_whatever.csh to submit a job                 #\n'];
        fwrite[fh2,'# qstat to monitorize your jobs                           #\n'];
        fwrite[fh2,'# qstat -f to see an overview of the queues               #\n'];
        fwrite[fh2,'# qdel "jobid" to delete a job                            #\n'];
        fwrite[fh2,'###########################################################\n'];
        fwrite[fh2,'#$ -N duck_smdZZ_325K   # The name of the job, can be whatever makes sense to you\n'];
        fwrite[fh2,'#$ -S /bin/bash          # Force sh if not Sun Grid Engine default shell\n'];
        fwrite[fh2,'#$ -cwd  # The batchsystem should use the current directory as working directory.\n'];
        fwrite[fh2,'#$ -q gpu            # Queue name where the job should be placed into.\n'];
        fwrite[fh2,'#$ -o duck_ZZ.q.o             # Redirect output stream to this file.\n'];
        fwrite[fh2,'#$ -e duck_ZZ.q.e             # Redirect error stream to this file.\n'];
        fwrite[fh2,'#$ -l h_rt=10:00:00 # Time limit\n'];
        fwrite[fh2,'#$ -l gpu=1\n'];
//      fwrite[fh2,'#$ -l h=\'syrah|garnatxa\'\n'];
        fwrite[fh2,'### TO CHECK IF WE DEAL WITH A TITAN GPU ###################\n'];
        fwrite[fh2,'smitool=`which nvidia-smi`\n'];
        fwrite[fh2,'type=`$smitool -L | grep TITAN | cut -f5 -d" " | tail -n 1`\n'];
        fwrite[fh2,'if [ "$type" == "TITAN" ]; then\n'];
        fwrite[fh2,'export AMBERHOME=/data/SOFT/amber12_TITAN\n'];
        fwrite[fh2,'export LD_LIBRARY_PATH=/usr/local/cuda-5.0/lib64\n'];
        fwrite[fh2,'export PATH=/data/SOFT/amber12_TITAN/bin:${}PATH{}\n','{','}'];
        fwrite[fh2,'else\n'];
        fwrite[fh2,'module load amber12 cuda50 mpich2gnu44\n'];
        fwrite[fh2,'fi\n'];
        fwrite[fh2,'#############################################################\n'];
        fwrite[fh2,'pmemd.cuda -O -i ../duck_325K.in -o duck_ZZ.o -p ../lib/system_solv.prmtop -c ../mdZZ.rst -r duck_ZZ.rst -x duck_ZZ.nc -e duck_ZZ.e -ref ../lib/system_solv.prmcrd\n'];
        fwrite[fh2,'exit\n'];
        fclose fh2;

	cd currentDir;
endfunction

global function writeDUCKSMDQueue_Workstation[options]
        local currentDir= cd [];
        local fh=fopenw ['duck_template_gpu.sh'];
        fwrite[fh,'pmemd.cuda -O -i ../duck.in -o duck_ZZ.o -p ../lib/system_solv.prmtop -c ../mdZZ.rst -r duck_ZZ.rst -x duck_ZZ.nc -e duck_ZZ.e -ref ../lib/system_solv.prmcrd\n'];
        fwrite[fh,'exit\n'];
        fclose fh;

        local fh2=fopenw ['duck_template_gpu_325K.sh'];
        fwrite[fh2,'pmemd.cuda -O -i ../duck_325K.in -o duck_ZZ.o -p ../lib/system_solv.prmtop -c ../mdZZ.rst -r duck_ZZ.rst -x duck_ZZ.nc -e duck_ZZ.e -ref ../lib/system_solv.prmcrd\n'];
        fwrite[fh2,'exit\n'];
        fclose fh2;

        cd currentDir;
endfunction



//SRC QUEUES END
